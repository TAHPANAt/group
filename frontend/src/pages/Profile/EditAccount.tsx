import { useEffect, useState } from "react";
import "./Profile.css";
import useEcomStore from "../../store/ecom-store";
import { getMyProfile, updatePeople } from "../../api/profile";

interface EditAccountProps {
  onClose: () => void;
  onSave: () => void; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° onSave
}

export default function EditAccount({ onClose, onSave }: EditAccountProps) {
  const token = useEcomStore((state: any) => state.token);

  const [form, setForm] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    age: 0,
    birthDay: "",
    address: "",
    gender: "",
  });

  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchData() {
      try {
        const res = await getMyProfile(token);
        const u = res.data;
        setForm({
          firstName: u.firstName || "",
          lastName: u.lastName || "",
          email: u.email || "",
          phone: u.phone || "",
          age: u.age || 0,
          birthDay: u.birthDay ? u.birthDay.split("T")[0] : "",
          address: u.address || "",
          gender: u.gender || "",
        });
      } catch (err) {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• account ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      } finally {
        setLoading(false);
      }
    }
    fetchData();
  }, [token]);

  const onField =
    (key: keyof typeof form) =>
    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
      setForm((s) => ({ ...s, [key]: e.target.value }));
    };

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    try {
      await updatePeople(form, token);
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ");
      onSave(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh ‡∏´‡∏ô‡πâ‡∏≤
      onClose();
    } catch (err) {
      console.error("update account failed:", err);
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå");
    }
  }

  if (loading) return <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;

  return (
    <div className="edit-page">
      <div className="edit-card">
        <h2 className="edit-title">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
        <form onSubmit={handleSubmit} className="edit-form">
          <label>‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á</label>
          <input value={form.firstName} onChange={onField("firstName")} required />

          <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
          <input value={form.lastName} onChange={onField("lastName")} required />

          <label>Email</label>
          <input type="email" value={form.email} onChange={onField("email")} required />

          <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
          <input value={form.phone} onChange={onField("phone")} />

          <label>‡∏≠‡∏≤‡∏¢‡∏∏</label>
          <input
            type="number"
            value={form.age}
            onChange={(e) => setForm((s) => ({ ...s, age: parseInt(e.target.value, 10) }))}
          />

          <label>‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î</label>
          <input type="date" value={form.birthDay} onChange={onField("birthDay")} />

          <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
          <textarea value={form.address} onChange={onField("address")} rows={3} />

          <label>‡πÄ‡∏û‡∏®</label>
          <select value={form.gender} onChange={onField("gender")}>
            <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏® --</option>
            <option value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</option>
            <option value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</option>
          </select>

          <div className="edit-actions">
            <button type="submit" className="btn-save">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button type="button" className="btn-cancel" onClick={onClose}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </div>
        </form>
      </div>
    </div>
  );
}